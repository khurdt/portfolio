let work=function(){let e,a=[{name:"Angular Movie Info App",github:"https://github.com/khurdt/movie-app-angular-client",view:"https://khurdt.github.io/movie-app-angular-client",whatIsIt:"An app that displays movies based on its existing server-side code (REST API and database), and allows you to see information about each movie, its genre and director. One can create an account and collect their personal favorite movies and delete them.",how:'This app utitlized "Angular" for its client-side technology and "typedoc" for the supporting documentation. I used Angular Material to aid me in implementing CSS, Angular Routing was implemented, as well as a "service" for all my endpoint https calls.',challenges:"Learning Angular Material and how it effected the rest of the css. Also converting API data in order to display all user likes for each movie.",img:"./images/angularFlix.png",modalImg:"./images/angular.png"},{name:"Chat App",github:"https://github.com/khurdt/chat-app",view:"https://github.com/khurdt/chat-app#simple-chat-application",whatIsIt:"An app to to be able to send texts, images, and current location.",how:'This app utilized React-Native by using "Expo" for making universal native apps for Android, iOS, and the web with JavaScript and React, "Firebase" as its real-time database, and "Gifted Chat" as its Chat UI.',challenges:"One of the issues faced was implementing external libraries to be able to pick a photo from library, take a photo, get current location, and send it through Gifted Chat.",img:"./images/chat.png",modalImg:"./images/holding-phone.png"},{name:"Meet App",github:"https://github.com/khurdt/meet-app",view:"https://khurdt.github.io/meet-app/",whatIsIt:"An app for users to see events in different cities and potentially meet with others.",how:"Built using React, Google Calendars as my data source and a serverless function from AWS I could render a list of events making it look pretty with Bootstrap. I also used recharts as a way to make pie and bar charts. This app was also converted into a Progressive Web App(PWA) being able to be offline and used as either as a desktop or mobile app.",challenges:"The most challenging issue was learning how the serverless functions work, and getting data from google calendars with the lambda function",img:"./images/meet.png",modalImg:"./images/event-ticket-png.png"},{name:"React Movie Info App",github:"https://github.com/khurdt/movie-app-client",view:"https://kh-cinema-app.netlify.app/",whatIsIt:"An app that displays movies based on its existing server-side code (REST API and database), and allows you to see information about each movie, its genre and director. One can create an account and collect their personal favorite movies and delete them.",how:"Built App using React, Bootstrap, Redux, and Axios for HTTPS calls.",challenges:"One of the difficulties or main cause of bugs was trying to pass props and functions without losing their state or loading them before page rendered. The other difficulty was how to keep all the data the same as different views updated.",img:"./images/movie-app.png",modalImg:"./images/lego.png"},{name:"Movie App Server and Database",github:"https://github.com/khurdt/movie-app-api",view:"https://kh-movie-app.herokuapp.com",whatIsIt:"Server and Database for serving movie data to the React and Angular Movie Apps;",how:"Built using Node, Express, and Mongo. Also utilized Mongoose middleware for model schemas and Passport middleware for generating and authenticating JSON Web Token(JWT) token. Also used Bycrypt middleware to hashing password and authenticating hashed password. Testing endpoints with Postman.",challenges:"Learning how to create endpoints and manipulate the data with the mongo language, and implementing the JSON Web Token(JWT) token.",img:"./images/server.jpg",modalImg:"./images/database.png"},{name:"Pokedex App",github:"https://github.com/khurdt/pokedex.github.io",view:"https://khurdt.github.io/pokedex.github.io/",whatIsIt:"An app that fetches pokemon from an API and displays its image and information within a modal.",how:"This app was built using Vanilla Javascript, HTML5, and Cascading Style Sheets.",challenges:"The main learning curve was manipulating the DOM via Javascript and implementing the search bar, and learning how to access data from api.",img:"./images/pokedex.png",modalImg:"./images/venusaur.png"},{name:"Drawing App",github:'github__link" href="https://github.com/khurdt/drawing.app.github.io',view:"https://khurdt.github.io/drawing-app.github.io/",whatIsIt:"An app for drawing on a blank canvas with different colors, multiple width sizes, and mirror or quardrant lines.",how:"This app utilized HTML5 canvas, Vanilla Javascript, and Cascading Style Sheets",challenges:"Learning the canvas language and how to draw multiple lines at the same time",img:"./images/drawing.png",modalImg:"./images/color1.png"},{name:"To Do List App",github:'github__link" href="https://github.com/khurdt/to-do-list.app.github.io',view:"https://khurdt.github.io/to-do-list-app.github.io/",whatIsIt:"An app that displays a list from the provided input and allows you to highlight, cross out, or delete items.",how:"This app utilized JQuery, HTML5, and Cascading Style Sheets.",challenges:"Learning the JQuery language which was found to be much simpler than Vanilla Javascript",img:"./images/todolist.png",modalImg:"./images/todolist (1).png"}];function t(e){let a=$("#modal-container"),t=$(".modal-body"),i=$(".modal-title"),n=$(".modal-footer");i.empty(),t.empty(),n.empty();let o=$('<h1 class="text-capitalize">'+e.name+"</h1>"),s=$('<img style="width:30%;display:grid;margin: auto;">');s.attr("src",e.modalImg);let l=$('<li style="list-style-type: none;"></li>'),p=$('<h3 style="margin-right: auto;">What Is It??</h3>'),r=$(`<p style="margin:10px;">${e.whatIsIt}</p>`),h=$('<h3 style="margin-right: auto;">How?</h3>'),d=$(`<p style="margin:10px;">${e.how}</p>`),g=$('<h3 style="margin-right: auto;">Challenges:</h3>'),m=$(`<p style="margin:10px;">${e.challenges}</p>`),u=$(`<a type="button" target="_blank" class="btn" style="text-decoration: none; margin-right: auto; padding: 10px;background-color: lightcoral;" href="${e.view}">See Project</a>`),c=$(`<a type="button" target="_blank" class="btn" style="text-decoration: none; margin-right: auto; padding: 10px; background-color: lightcoral;" href="${e.github}">See GitHub</a>`),b=$('<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>');i.append(o),t.append(s),t.append(l),l.append(p),l.append(r),l.append(h),l.append(d),l.append(g),l.append(m),n.append(u),n.append(c),n.append(b),a.modal()}return{loadWork:function(){a.forEach((function(a){e={name:a.name,github:a.github,view:a.view,whatIsIt:a.whatIsIt,how:a.how,challenges:a.challenges,img:a.img,modalImg:a.modalImg}}))},displayWork:function(e){let a=$("#work"),i=$('<li class="list-item"></li>'),n=$(`<button style="background-image: url('${e.img}');" class="grid__item"></button>`),o=$(`<h4>${e.name}</h4>`);i.append(o),i.append(n),a.append(i),n.on("click",(()=>{t(e)}))},showModal:t,getAll:function(){return a}}}();work.getAll().forEach((function(e){work.displayWork(e)}));
//# sourceMappingURL=work.d19c8d9a.js.map
